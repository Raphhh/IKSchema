#!/bin/bash

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_DIR="$SCRIPT_DIR/.."
BIN_DIR="$BASE_DIR/bin"
TEST_DIR="$BASE_DIR/tests"
FIXTURES_DIR="$TEST_DIR/__fixtures__"

output=""
current_test_name=""
error_type=0
number_of_tests=0
number_of_fails=0

assertTrue() {
  if eval "[[ $1 ]]"
    then
      echo -n "."
    else
      echo -n "F"
      error_type=1
      ((number_of_fails++))
      output="$output\n#$number_of_fails $current_test_name\n$2\n"
    fi
  ((number_of_tests++))
}

assertValidLastCommand() {
  assertTrue "$? -eq 0" "$1"
}

assertNotValidLastCommand() {
  assertTrue "$? -ne 0" "$1"
}

assertValidXml() {
  assertValidLastCommand "$("$BIN_DIR"/validate "$FIXTURES_DIR/$1" 2>&1)"
}

assertNotValidXml() {
  assertNotValidLastCommand "$("$BIN_DIR"/validate "$FIXTURES_DIR/$1" 2>&1)"
}

###### TESTS #####

source "$TEST_DIR/tests.sh"


###### RUN #####

for arg in $(declare -F)
do
  if [[ $arg == test* ]]
    then
      current_test_name="$arg"
	    eval "$arg"
	fi
done


###### DISPLAY #####

if [[ $error_type == 0 ]]
  then
    result_resume='OK'
  else
    result_resume='KO'
fi

ok_tests=$(($number_of_tests-$number_of_fails))
result_resume="$((($ok_tests*100/$number_of_tests)))%"

echo -e "\nResult: $result_resume (F:$number_of_fails/$number_of_tests)"

if [[ $error_type -ne 0 ]]
  then
    echo -e "$output"
fi


###### EXIT CODE #####

exit $error_type
